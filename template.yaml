AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Feedback Collector Backup Application

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: feedback-collector-backup-key
    Description: Name of an existing EC2 KeyPair for SSH access

Resources:
  FeedbackCollectorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      KeyName: !Ref KeyName
      SecurityGroups: 
        - !Ref FeedbackCollectorSecurityGroup
      IamInstanceProfile: !Ref FeedbackCollectorInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Enable error handling and logging
          set -e
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          echo "Starting UserData script execution..."
          
          # Update and install dependencies
          echo "Updating system packages..."
          dnf update -y
          
          # Install Node.js 18 (LTS)
          echo "Installing Node.js..."
          wget -qO- https://rpm.nodesource.com/setup_18.x | sudo bash -
          dnf install -y nodejs
          
          # Install git
          echo "Installing git..."
          dnf install -y git
          
          # Clone and setup app
          echo "Setting up application..."
          cd /home/ec2-user
          echo "Cloning repository from https://github.com/jjohnsondeverus/feedback-collector-backup.git"
          git clone https://github.com/jjohnsondeverus/feedback-collector-backup.git || {
            echo "Failed to clone repository"
            cat /var/log/cloud-init-output.log
            exit 1
          }
          
          echo "Setting permissions..."
          chown -R ec2-user:ec2-user feedback-collector-backup
          cd feedback-collector-backup || exit 1
          echo "Installing npm dependencies..."
          sudo -u ec2-user npm install
          
          # Set environment variables
          sudo -u ec2-user bash -c 'cat > .env << EOL
          NODE_ENV=${Environment}
          DYNAMODB_TABLE=${FeedbackTable}
          AWS_REGION=us-east-1
          
          # Fetch secrets from Parameter Store
          SLACK_BOT_TOKEN=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/SLACK_BOT_TOKEN" --with-decryption --query Parameter.Value --output text)
          SLACK_APP_TOKEN=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/SLACK_APP_TOKEN" --with-decryption --query Parameter.Value --output text)
          SLACK_SIGNING_SECRET=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/SLACK_SIGNING_SECRET" --with-decryption --query Parameter.Value --output text)
          
          JIRA_HOST=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/JIRA_HOST" --with-decryption --query Parameter.Value --output text)
          JIRA_USERNAME=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/JIRA_USERNAME" --with-decryption --query Parameter.Value --output text)
          JIRA_API_TOKEN=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/JIRA_API_TOKEN" --with-decryption --query Parameter.Value --output text)
          
          OPENAI_API_KEY=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/OPENAI_API_KEY" --with-decryption --query Parameter.Value --output text)
          OPENAI_MODEL=$(aws ssm get-parameter --name "/feedback-collector/${Environment}/OPENAI_MODEL" --with-decryption --query Parameter.Value --output text)
          PREVIEW_TIMEOUT=2500  # Set timeout for preview generation
          EOL'
          
          # Install and setup PM2
          sudo npm install -g pm2
          sudo -u ec2-user bash -c 'cd /home/ec2-user/feedback-collector-backup && pm2 start app.js'
          sudo -u ec2-user pm2 save
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user

  FeedbackCollectorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Feedback Collector
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Consider restricting to your IP
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  FeedbackCollectorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  FeedbackCollectorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref FeedbackCollectorRole

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub feedback-collector-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

Outputs:
  InstancePublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt FeedbackCollectorInstance.PublicDnsName
  FeedbackTableName:
    Description: DynamoDB table name
    Value: !Ref FeedbackTable 